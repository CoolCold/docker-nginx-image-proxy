proxy_cache_path /tmp/nginx/cache levels=1:2 keys_zone=remoteimages:10m max_size=1g inactive=45m;

server {
    listen 80 default_server;
    listen [::]:80 default_server;
    set $width -;
    set $height -;
    set $rotate 0;
    set $quality 96; # default to best quality in case image previously optimized
    set $sharpen 0;
    set $mycachekey "empty";
    set $myhost "";
    set $ofmt "";

# image_filter_crop_offset {left,center,right} {top,center,bottom};
    set $crop_offx left;
    set $crop_offy top;

    server_name                      _;
    root                             /usr/share/nginx/html;
    index                            index.html index.htm;
    error_page                       403 404 415 500 502 503 504 = @empty;

# begin image_filter stuff
    resolver                         8.8.8.8 8.8.4.4;
    image_filter_buffer              20M;
    image_filter_interlace           on;

# needed to allow uri protocol slashes from being merged
    merge_slashes                    off;


    proxy_redirect                   off;
    proxy_set_header                 X-Real-IP       $remote_addr;
    proxy_set_header                 X-Forwarded-For $proxy_add_x_forwarded_for;

    proxy_pass_header                Set-Cookie;
    proxy_connect_timeout            30s;
    proxy_send_timeout               30s;
    proxy_read_timeout               30s;
    proxy_temp_path                  /var/cache/nginx/temp;


# prevent client headers from going to origin
    proxy_pass_request_headers       off;

    proxy_ignore_headers             Vary Expires Set-Cookie Cache-Control;
    proxy_pass_header                P3P;
    proxy_cache_min_uses             2;
    proxy_cache                      remoteimages;
    proxy_ssl_server_name            on;

# valid for "any" http status within 10 minutes
    proxy_cache_valid                any 10m;

# only allow GET method
    proxy_method                     GET;

    location /healthcheck {
        default_type                 text/plain;
        return 200 "OK";
    }

    location ~* ^/echo {
        default_type                 text/plain;
        set $mybody $arg_body;

        if ($http_x_echo_body) {
            set $mybody $http_x_echo_body;
        }
        
        if ($arg_callback) {
            return 200 '$arg_callback($mybody);';
        }
        
        return 200 $mybody;
    }

    location ~* ^/rx/([^\/]+)/(.*) {
        set $myargs                  "$1";
        set $protocol                "http";
        set $image_uri               "$2";
        set $cmd                     "resize";
        set $image_path              "";


# if no protocol in URL, add them
        if ($image_uri !~ "(http:|https:)") {
            set $image_uri "http://$image_uri";
        }

# now process the real image url
        if ($image_uri ~ "^(http|https)+([:\/]+)([^/]*)(.*)") {
            set $protocol $1;
            set $myhost $3;
            set $image_path $4;
            set $image_uri "$protocol://$myhost$image_path";
        }



# change this to whitelist your host       
#        if ($myhost !~ ".*(host1.com|host2.org|host3.edu|host4.net|host5.info)$") {
#            set $image_uri "";
#            set $mycachekey "$myhost=denied";
#            rewrite ^ /403 last;
#            break;
#        }




# width
        if ($myargs ~ "^(\d+)\D*") {
            set $width $1;
        }

        if ($myargs ~ "w([_]*)(\d+)") {
            set $quality $2;
        }

        if ($arg_w) {
            set $width $arg_w;
        }

# height
        if ($myargs ~ "x(\d+)") {
            set $height $1;
        }

        if ($myargs ~ "h([_]*)(\d+)") {
            set $quality $2;
        }

        if ($arg_h) {
            set $width $arg_h;
        }

# quality
        if ($myargs ~ "q([_]*)(\d+)") {
            set $quality $2;
        }

        if ($arg_q) {
            set $width $arg_q;
        }

# rotate
        if ($myargs ~ "r([_]*)(\d+)") {
            set $rotate $2;
        }

        if ($arg_r) {
            set $width $arg_r;
        }

# gravity
        if ($myargs ~ "Center") {
            set $crop_offx center;
            set $crop_offy center;
        }

        if ($arg_g ~ "Center") {
            set $crop_offx center;
            set $crop_offy center;
        }

        if ($myargs ~ "South") {
            set $crop_offy bottom;
        }

        if ($arg_g ~ "South") {
            set $crop_offy bottom;
        }

        if ($myargs ~ "East") {
            set $crop_offx right;
        }

        if ($arg_g ~ "East") {
            set $crop_offx right;
        }

# sharpen
        if ($myargs ~ "e([_]*)(\d+)") {
            set $sharpen $2;
        }

        if ($arg_e) {
            set $sharpen $arg_e;
        }

# output format
        if ($myargs ~ "ofmt([_]*)(\d+)") {
            set $ofmt $2;
        }

        if ($arg_fmt) {
            set $ofmt $arg_ofmt;
        }
# crop
        if ($myargs ~ "c([_]*)1") {
            set $cmd "crop";
        }

        if ($arg_c = "1") {
            set $cmd "crop";
        }

        if ($myargs ~ "g_+") {
            set $cmd "crop";
        }

        if ($arg_g) {
            set $cmd "crop";
        }
        
        set $mycachekey "$image_uri?w=$width&h=$height&q=$quality&r=$rotate&e=$sharpen&cmd=$cmd&ofmt=$ofmt";

        rewrite ^ /cmd/$cmd last;
    }

    location /cmd/resize {
        internal;

        proxy_pass                  $image_uri$is_args$args;
        proxy_cache_key             $image_uri$is_args$args$slice_range;
        include                     /etc/nginx/sites-enabled/proxy-hide-headers.common;

        add_header                  X-ImageProxy-Cache $upstream_cache_status;
        add_header                  X-ImageProxy-Debug $mycachekey;
        add_header                  Cache-Control "public";
        expires                     12h;
        
        image_filter_sharpen        $sharpen;
        image_filter_jpeg_quality   $quality;
        image_filter_webp_quality   $quality;
        image_filter_output         $ofmt;
        image_filter                rotate $rotate;

        image_filter                resize $width $height;
    }

    location /cmd/crop {
        internal;

        proxy_pass                  $image_uri$is_args$args;
        proxy_cache_key             $image_uri$is_args$args$slice_range;
        include                     /etc/nginx/sites-enabled/proxy-hide-headers.common;

        add_header                  X-ImageProxy-Cache $upstream_cache_status;
        add_header                  X-ImageProxy-Debug $mycachekey;
        add_header                  Cache-Control "public";
        expires                     12h;
        
        image_filter_sharpen        $sharpen;
        image_filter_jpeg_quality   $quality;
        image_filter_webp_quality   $quality;
        image_filter_output         $ofmt;
        image_filter                rotate $rotate;

        image_filter_crop_offset    $crop_offx $crop_offy;
        image_filter                crop $width $height;
    }

    location @empty {
        add_header                  X-ImageProxy-Debug $mycachekey;
        empty_gif;
    }
}
